###########################################
#These two scripted effects will allow you to "switch" to a new country
#Call the setup effect in the immediate of an event and give the input.
#Then call the actual effect in the option of that same event with the input.
#And magically you will be in a new country.
###########################################
switch_player_country_setup_effect = {
	##REQUIRED INPUT
	# RULER_NAME = XXX
	# RULER_LAST_NAME = XXX
	# RULER_CULTURE
	# RULER_RELIGION
	hidden_effect = {
	    create_character = {
	        first_name = $RULER_NAME$
	        family_name = $RULER_LAST_NAME$
	       	age = 25
	        culture = $RULER_CULTURE$
	        religion = $RULER_RELIGION$
	        female = no
	        good_finesse_trait_effect = yes
	        good_popularity_trait_effect = yes
	        save_scope_as = new_ruler
	    }
    }
}
switch_player_country_effect = {
#Can't figure out how to get truces to transfer...
	##REQUIRED INPUT
	# NEW_NAME
	# NEW_ADJECTIVE
	# NEW_TAG
	# OLD_COUNTRY_COLOR
	# OLD_COUNTRY_NAME
	# OLD_COUNTRY_ADJ
	# OLD_TAG
	# OLD_COUNTRY_FLAG
	# OLD_COUNTRY_HERITAGE
	# OLD_COUNTRY_CULTURE
	hidden_effect = {
		save_scope_as = new_country #Used for money/manpower svalues
		current_ruler = { save_scope_as = old_ruler }
		random_owned_province = {
			limit = { is_capital = yes }
			save_scope_as = current_capital
		}
	    change_country_name = $NEW_NAME$
		change_country_adjective = $NEW_ADJECTIVE$
		add_stability_effect = yes
		if = { # Created leader
			limit = {
				scope:new_ruler = {
					OR = {
						is_minor_character = yes
						family = scope:old_ruler.family
					}
				}
			}
			create_family = scope:new_ruler
		}
		set_as_ruler = scope:new_ruler
		scope:current_capital = {
			create_country = {
				save_scope_as = old_country
			}
			scope:old_country = {
				change_country_color = $OLD_COUNTRY_COLOR$
				change_country_name = $OLD_COUNTRY_NAME$
				change_country_adjective = $OLD_COUNTRY_ADJ$
				change_country_flag = $OLD_COUNTRY_FLAG$
				set_country_heritage = $OLD_COUNTRY_HERITAGE$
				set_primary_culture = $OLD_COUNTRY_CULTURE$
				set_country_religion = $OLD_COUNTRY_RELIGION$
			}
		}
		if = {
			limit = { has_law = work_for_the_best }
			scope:old_country = {
				set_variable = {
					name = gov_change_legion_law
					value = 1
				}			
			}
		}
		else_if = {
			limit = { has_law = standing_army_law }
			scope:old_country = {
				set_variable = {
					name = gov_change_legion_law
					value = 2
				}			
			}
		}
		scope:old_ruler.family = { move_family = scope:old_country } # Move Old ruler and his family to old country
		scope:old_ruler = {
			move_country_with_entire_family_effect = { COUNTRY = scope:old_country }
		}
		every_family = {
			limit = {
				NOT = { 
					THIS = scope:new_ruler.family 
				}
			}
			move_family = scope:old_country
			head_of_family = {
				move_country_with_entire_family_effect = { COUNTRY = scope:old_country }			
			}
		}
		every_character = {
			limit = {
				is_minor_character = yes
				NOR = {
					is_close_relative = scope:new_ruler
					trigger_if = {
						limit = { is_married = yes }
						spouse.family = scope:new_ruler.family
					}
				}
			}
			move_country_with_close_family_effect = { COUNTRY = scope:old_country }
		}
########################################
#Add the land you want to keep and the var that you define in the setup effect here.
		switch = {
			trigger = has_variable
			change_to_kapisa = {
				every_owned_province = {
					limit = {
						NOR = { 
							is_in_area = sivi_area
							is_in_area = taxila_area
							is_in_area = sattagydia_area
						}
					}
					set_owned_by = scope:old_country
				}
			}
			change_to_panchanada = {
				every_owned_province = {
					limit = {
						NOR = { 
							is_in_area = trigarta_area
							is_in_area = panchanada_area
						}
					}
					set_owned_by = scope:old_country
				}
			}
			change_to_kuninda = {
				every_owned_province = {
					limit = {
						NOT = { 
							is_in_area = madra_area
						}
					}
					set_owned_by = scope:old_country
				}				
			}
			change_to_kashmir = {
				every_owned_province = {
					limit = {
						NOR = { 
							is_in_area = kasmira_area
							is_in_area = gandhara_area
							is_in_area = bamyan_area
						}
					}
					set_owned_by = scope:old_country
				}			
			}
			change_to_sauvira = {
				every_owned_province = {
					limit = {
						NOR = { 
							#is_in_area = patalene_area
							is_in_area = north_sindhu_area
							is_in_area = south_sindhu_area
							is_in_area = sauvira_area
						}
					}
					set_owned_by = scope:old_country
				}		
			}
			change_to_shunga = {
				every_owned_province = {
					limit = {
						NOT = { is_in_list = shunga_provinces_list }
					}
					set_owned_by = scope:old_country
				}
			}
			change_to_satavahana = {
				every_owned_province = {
					limit = {
						NOT = { is_in_list = satavahana_provinces_list }
					}
					set_owned_by = scope:old_country
				}
			}
		}
		scope:old_country = {
			set_as_ruler = scope:old_ruler
			add_treasury = old_treasury_svalue	#Give old treasury
			add_manpower = old_manpower_svalue
			add_military_experience_to_new_country_effect = yes
		}
		#Remove old gold so you can't game the event chain and save millions of gold before switching.
		add_treasury = remove_treasury_svalue
		add_manpower = remove_manpower_svalue
		add_treasury = 200
		add_manpower = 10
		if = {
			limit = { has_variable = gov_change_legion_law }
			if = {
				limit = { var:gov_change_legion_law = 1 }
				change_law = work_for_the_best
			}
			else_if = {
				limit = { var:gov_change_legion_law = 2 }
				change_law = standing_army_law
			}
			remove_variable = gov_change_legion_law
		}
		every_legion = {
			save_scope_as = old_legion_scope
			every_legion_commander = {
				save_scope_as = old_commander_scope
				scope:old_legion_scope = { remove_commander = scope:old_commander_scope }
			}
			move_legion = scope:old_country.capital_scope.governorship
			#change owner?
		}
		every_navy = { add_to_list = old_army_list }
		every_in_list  = {
			list = old_army_list
			if = {
				limit = { exists = commander }
				commander = { remove_all_positions = yes }			
			}
			change_unit_owner = scope:old_country
		}
		#This is the way vanilla does it, I feel like I should check what subject type they are so they get the right one after...but idk
		every_subject = {
			limit = {
				is_subject_type = feudatory
			}
			ROOT = {
				release_subject = PREV
			}
			scope:old_country = {
				make_subject = {
					target = PREV
					type = feudatory
				}
			}
		}
		every_subject = {
			limit = {
				is_subject_type = tributary
			}
			ROOT = {
				release_subject = PREV
			}
			scope:old_country = {
				make_subject = {
					target = PREV
					type = tributary
				}
			}			
		}
		every_subject = {
			limit = {
				is_subject_type = satrapy
			}
			ROOT = {
				release_subject = PREV
			}
			scope:old_country = {
				make_subject = {
					target = PREV
					type = satrapy
				}
			}			
		}
		every_subject = {
			limit = {
				is_subject_type = client_state
			}
			ROOT = {
				release_subject = PREV
			}
			scope:old_country = {
				make_subject = {
					target = PREV
					type = client_state
				}
			}			
		}		
		every_subject = {
			limit = {
				is_subject_type = vassal_tribe
			}
			ROOT = {
				release_subject = PREV
			}
			scope:old_country = {
				make_subject = {
					target = PREV
					type = vassal_tribe
				}
			}			
		}
		every_country_treasure = {
			add_to_list = old_treasures_list
		}
		every_in_list = {
			list = old_treasures_list
            limit = {
                NOT = { treasure_owner = scope:old_country }
            }
            transfer_treasure_to_country = scope:old_country
		}

		every_province = {
			remove_claim = ROOT
		}
	}
}
#This stuff has to be down here because the first one is taking too many arguments I guess
switch_player_country_second_effect = {
	##REQUIRED INPUT
	# NEW_GOVERNMENT
	# NEW_COLOR
	# NEW_RELIGION
	# NEW_CULTURE
	# NEW_TAG
	# OLD_TAG
	hidden_effect = {
		change_government = $NEW_GOVERNMENT$
		change_country_color = $NEW_COLOR$
		set_country_religion = $NEW_RELIGION$
		#Create a new family
		while = {
			count = 12 #The amount needed to fill offices
			create_character  = {
	        	culture = $NEW_CULTURE$
	        	religion = $NEW_RELIGION$
				set_family = scope:new_ruler.family
				adapt_family_name = yes
			}
		}
		while = {
			count = 4
			create_character  = {
	        	culture = $NEW_CULTURE$
	        	religion = $NEW_RELIGION$
	        	female = yes
				set_family = scope:new_ruler.family
				adapt_family_name = yes
			}
		}
        set_primary_culture_cleanup_effect = {
            NEW_PRIMARY_CULTURE = $NEW_CULTURE$
            MAKE_OLD_CULTURE_INTEGRATED = no
        }
		change_country_tag = $NEW_TAG$
		scope:old_country = {
			change_country_tag = $OLD_TAG$
		}
    }
}
add_military_experience_to_new_country_effect = {
	hidden_effect = {
		#Give mil experience based on date, if date is really late reduce cost to take mil traditions so they can catch up.
		#If it is too early give nothing.
		if = {
			limit = {
				current_date > 500.1.1
				current_date < 550.1.1
			}
			add_military_experience = 100
		}
		else_if = {
			limit = {
				current_date > 550.1.1
				current_date < 600.1.1
			}
			add_military_experience = 200
		}
		else_if = {
			limit = {
				current_date > 650.1.1
				current_date < 700.1.1
			}
			add_military_experience = 200
			add_country_modifier = {
				name = released_country_mil_tradition_1_ai_mod
				duration = 730
			}
		}
		else_if = {
			limit = {
				current_date > 700.1.1
			}
			add_military_experience = 200
			add_country_modifier = {
				name = released_country_mil_tradition_2_ai_mod
				duration = 730
			}
		}
	}
}