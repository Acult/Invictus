
indian_colony_specialization_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_province_modifier = indian_general_colony
			}
			remove_province_modifier = indian_general_colony
		}
		if = {
			limit = {
				has_province_modifier = maurya_general_colony
			}
			remove_province_modifier = maurya_general_colony
		}
		switch = {
		trigger = has_variable
			india_military_flag = {
		    add_permanent_province_modifier = {
		    name = military_colony
		    }
		    remove_variable = india_military_flag	        				
			}
			india_civic_flag = {
	        add_permanent_province_modifier = {
	        name = civic_colony
	        }
	        remove_variable = india_civic_flag
			}
			india_religious_flag = {
	        add_permanent_province_modifier = {
	        name = religious_colony
	        }
	        remove_variable = india_religious_flag
			}
			india_trade_flag = {
	        add_permanent_province_modifier = {
	        name = trade_colony
	        }
	        remove_variable = india_trade_flag
			}
		}
	}
}

indian_client_legion_law_capital_effect = {
	if = {
		limit = {
			NOR = {
			has_law = republican_recruitment_2 # legions capital
			has_law = republican_recruitment_4 # legions enabled
			}
		}
		change_law = republican_recruitment_2 # capital
	}	
}

indian_client_legion_law_enabled_effect = {
	if = {
		limit = {
			NOT = { 
			has_law = republican_recruitment_4 # legions enabled
			}
		}
		change_law = republican_recruitment_4 # enabled
	}	
}

tribal_duel_description_distribution = {	#Makes it so no description shows up twice in a row
	switch = {
		trigger = has_variable 

		axe_combat = {
			if = {
				limit = {
					NOT = { has_variable = generic_desc_giver }
				}
				set_variable = {	#I do this to make sure the 1st and 3rd descriptions are never the same.
					name = generic_desc_giver
					value = { integer_range = { min = 1 max = 7 } }	#7 possible generic descriptions change this to add more.
				}
			}
			else = {
				limit = { has_variable = generic_desc_giver }
				remove_variable = generic_desc_giver
				if = {
					limit = { var:axe_combat = 1 }
					random_list = {
						50 = {
							change_variable = {
								name = axe_combat
								add = 1
							}
						}
						50 = {
							change_variable = {
								name = axe_combat
								add = 2
							}
						}
					}
				}
				else_if = {
					limit = { var:axe_combat = 2 }
					random_list = {
						50 = {
							change_variable = {
								name = axe_combat
								add = 1
							}
						}
						50 = {
							change_variable = {
								name = axe_combat
								subtract = 1
							}
						}
					}
				}
				else = {
					limit = { var:axe_combat = 3 }
					random_list = {
						50 = {
							change_variable = {
								name = axe_combat
								subtract = 1
							}
						}
						50 = {
							change_variable = {
								name = axe_combat
								subtract = 2
							}
						}
					}				
				}
			}
		}
		spear_combat = {
			if = {
				limit = {
					NOT = { has_variable = generic_desc_giver }
				}
				set_variable = {	#I do this to make sure the 1st and 3rd descriptions are never the same.
					name = generic_desc_giver
					value = { integer_range = { min = 1 max = 5 } }	#5 possible generic descriptions change this to add more.
					days = 365
				}
			}
			else = {
				limit = { has_variable = generic_desc_giver }
				remove_variable = generic_desc_giver
				if = {
					limit = { var:spear_combat = 1 }
					random_list = {
						50 = {
							change_variable = {
								name = spear_combat
								add = 1
							}
						}
						50 = {
							change_variable = {
								name = spear_combat
								add = 2
							}
						}
					}
				}
				else_if = {
					limit = { var:spear_combat = 2 }
					random_list = {
						50 = {
							change_variable = {
								name = spear_combat
								add = 1
							}
						}
						50 = {
							change_variable = {
								name = spear_combat
								subtract = 1
							}
						}
					}
				}
				else = {
					limit = { var:spear_combat = 3 }
					random_list = {
						50 = {
							change_variable = {
								name = spear_combat
								subtract = 1
							}
						}
						50 = {
							change_variable = {
								name = spear_combat
								subtract = 2
							}
						}
					}				
				}
			}
		}
		horse_combat = {
			if = {
				limit = {
					NOT = { has_variable = generic_desc_giver }
				}
				set_variable = {	#I do this to make sure the 1st and 3rd descriptions are never the same.
					name = generic_desc_giver
					value = { integer_range = { min = 1 max = 5 } }	#5 possible generic descriptions change this to add more.
					days = 365
				}
			}
			else = {
				limit = { has_variable = generic_desc_giver }
				remove_variable = generic_desc_giver
				if = {
					limit = { var:horse_combat = 1 }
					random_list = {
						50 = {
							change_variable = {
								name = horse_combat
								add = 1
							}
						}
						50 = {
							change_variable = {
								name = horse_combat
								add = 2
							}
						}
					}
				}
				else_if = {
					limit = { var:horse_combat = 2 }
					random_list = {
						50 = {
							change_variable = {
								name = horse_combat
								add = 1
							}
						}
						50 = {
							change_variable = {
								name = horse_combat
								subtract = 1
							}
						}
					}
				}
				else = {
					limit = { var:horse_combat = 3 }
					random_list = {
						50 = {
							change_variable = {
								name = horse_combat
								subtract = 1
							}
						}
						50 = {
							change_variable = {
								name = horse_combat
								subtract = 2
							}
						}
					}				
				}
			}
		}
		hands_combat = {
			if = {
				limit = {
					NOT = { has_variable = generic_desc_giver }
				}
				set_variable = {	#I do this to make sure the 1st and 3rd descriptions are never the same.
					name = generic_desc_giver
					value = { integer_range = { min = 1 max = 5 } }	#5 possible generic descriptions change this to add more.
					days = 365
				}
			}
			else = {
				limit = { has_variable = generic_desc_giver }
				remove_variable = generic_desc_giver
				if = {
					limit = { var:hands_combat = 1 }
					random_list = {
						50 = {
							change_variable = {
								name = hands_combat
								add = 1
							}
						}
						50 = {
							change_variable = {
								name = hands_combat
								add = 2
							}
						}
					}
				}
				else_if = {
					limit = { var:hands_combat = 2 }
					random_list = {
						50 = {
							change_variable = {
								name = hands_combat
								add = 1
							}
						}
						50 = {
							change_variable = {
								name = hands_combat
								subtract = 1
							}
						}
					}
				}
				else = {
					limit = { var:hands_combat = 3 }
					random_list = {
						50 = {
							change_variable = {
								name = hands_combat
								subtract = 1
							}
						}
						50 = {
							change_variable = {
								name = hands_combat
								subtract = 2
							}
						}
					}				
				}
			}
		}
		sword_combat = {
			if = {
				limit = {
					NOT = { has_variable = generic_desc_giver }
				}
				set_variable = {	#I do this to make sure the 1st and 3rd descriptions are never the same.
					name = generic_desc_giver
					value = { integer_range = { min = 1 max = 5 } }	#5 possible generic descriptions change this to add more.
					days = 365
				}
			}
			else = {
				limit = { has_variable = generic_desc_giver }
				remove_variable = generic_desc_giver
				if = {
					limit = { var:sword_combat = 1 }
					random_list = {
						50 = {
							change_variable = {
								name = sword_combat
								add = 1
							}
						}
						50 = {
							change_variable = {
								name = sword_combat
								add = 2
							}
						}
					}
				}
				else_if = {
					limit = { var:sword_combat = 2 }
					random_list = {
						50 = {
							change_variable = {
								name = sword_combat
								add = 1
							}
						}
						50 = {
							change_variable = {
								name = sword_combat
								subtract = 1
							}
						}
					}
				}
				else = {
					limit = { var:sword_combat = 3 }
					random_list = {
						50 = {
							change_variable = {
								name = sword_combat
								subtract = 1
							}
						}
						50 = {
							change_variable = {
								name = sword_combat
								subtract = 2
							}
						}
					}				
				}
			}
		}
	}
}
tribal_duel_rewards_effect = {
		if = {
			limit = {
				has_variable = random_effects_1
			}
			if = {
				limit = {
					scope:fighter_of_duel = {
						has_nickname = no
					}
				}
				scope:fighter_of_duel = {
					add_nickname = THE_FIGHTER
					add_popularity = 10
				}
			}
			else = {
				scope:fighter_of_duel = {
					add_popularity = 10
				}
			}
		}
		if = {
			limit = {
				has_variable = random_effects_2
			}
			if = {
				limit = {
					scope:fighter_of_duel = {
						has_nickname = no
					}
				}
				scope:fighter_of_duel = {
					add_nickname = THE_CHAMPION
					add_martial = 1
					employer = {
						add_stability = 5
					}
				}
			}
			else = {
				scope:fighter_of_duel = {
					add_martial = 1
					employer = {
						add_stability = 5
					}
				}
			}
		}
		if = {
			limit = {
				has_variable = random_effects_3
			}
			if = {
				limit = {
					scope:fighter_of_duel = {
						has_nickname = no
					}
					scope:target = {
						is_alive = no
					}
				}
				scope:fighter_of_duel = {
					add_nickname = THE_SLAYER
					add_character_modifier = {
						name = renowned_fighter
						duration = 3650
					}
				}
			}
			else = {
				scope:fighter_of_duel = {
					add_character_modifier = {
						name = renowned_fighter
						duration = 3650
					}
				}
			}
		}
		if = {
			limit = {
				has_variable = random_effects_4
			}
			if = {
				limit = {
					scope:fighter_of_duel = {
						has_nickname = no
					}
				}
				scope:fighter_of_duel = {
					add_nickname = THE_STRONG
					add_martial = 1
					add_finesse = 1
				}
			}
			else = {
				scope:fighter_of_duel = {
					add_martial = 1
					add_finesse = 1
				}
			}
		}
		if = {
			limit = {
				has_variable = random_effects_5
			}
			if = {
				limit = {
					scope:fighter_of_duel = {
						has_nickname = no
					}
					scope:target = {
						is_alive = no
					}
				}
				scope:fighter_of_duel = {
					add_nickname = THE_TAKER_OF_SOULS
					add_popularity = 5
					add_character_modifier = {
						name = renowned_fighter
						duration = 3650
					}					
					family = {
						add_prestige = 100
					}
				}
			}
			else = {
				scope:fighter_of_duel = {
					add_popularity = 5
					add_character_modifier = {
						name = renowned_fighter
						duration = 3650
					}					
					family = {
						add_prestige = 100
					}
				}
			}
		}
}
###########################################
#These two scripted effects will allow you to "switch" to a new country
#Call the setup effect in the immediate of an event and give the input.
#Then call the actual effect in the option of that same event with the input.
#And magically you will be in a new country.
###########################################
switch_player_country_setup_effect = {
	##REQUIRED INPUT
	# RULER_NAME = XXX
	# RULER_LAST_NAME = XXX
	# RULER_CULTURE
	# RULER_RELIGION
	hidden_effect = {
	    create_character = {
	        first_name = $RULER_NAME$
	        family_name = $RULER_LAST_NAME$
	       	age = 30
	        culture = $RULER_CULTURE$
	        religion = $RULER_RELIGION$
	        female = no
	        good_finesse_trait_effect = yes
	        good_popularity_trait_effect = yes
	        save_scope_as = new_ruler
	    }
    }
}
switch_player_country_effect = {
	##REQUIRED INPUT
	# NEW_GOVERNMENT
	# NEW_COLOR
	# NEW_RELIGION 
	# NEW_NAME
	# NEW_ADJECTIVE
	# AREA_1 	####This part will need to change for each call.
	# AREA_2
	# OLD_COUNTRY_COLOR
	# OLD_COUNTRY_NAME
	# OLD_COUNTRY_ADJ
	# OLD_COUNTRY_FLAG
	# OLD_COUNTRY_HERITAGE
	# OLD_COUNTRY_CULTURE
	hidden_effect = {
		current_ruler = { save_scope_as = old_ruler }
		change_government = $NEW_GOVERNMENT$
		change_country_color = $NEW_COLOR$
		set_country_religion = $NEW_RELIGION$
	    change_country_name = $NEW_NAME$
		change_country_adjective = $NEW_ADJECTIVE$
		add_treasury = 300
		add_manpower = 8
		add_stability_effect = yes
		if = { # Created leader
			limit = {
				scope:new_ruler = {
					OR = {
						is_minor_character = yes
						family = scope:old_ruler.family
					}
				}
			}
			create_family = scope:new_ruler
		}
		set_as_ruler = scope:new_ruler
		ordered_owned_province = {
			limit = {
				NOR = {
					is_in_area = $AREA_1$	#CANT MAKE THIS MODULAR, will be different each time depending on what land you want.
					is_in_area = $AREA_2$
				}
			}
			order_by = total_population
			save_scope_as = old_country_capital
			create_country = {
				save_scope_as = old_country
			}
			scope:old_country = {
				### Why does vanilla not set a government for the old country???
				change_country_color = $OLD_COUNTRY_COLOR$
				change_country_name = $OLD_COUNTRY_NAME$
				change_country_adjective = $OLD_COUNTRY_ADJ$
				change_country_flag = $OLD_COUNTRY_FLAG$
				set_country_heritage = $OLD_COUNTRY_HERITAGE$
				set_primary_culture = $OLD_COUNTRY_CULTURE$
				set_country_religion = $OLD_COUNTRY_RELIGION$
			}
		}
		if = {
			limit = { has_law = work_for_the_best }
			scope:old_country = {
				set_variable = {
					name = gov_change_legion_law
					value = 1
				}			
			}
		}
		else_if = {
			limit = { has_law = standing_army_law }
			scope:old_country = {
				set_variable = {
					name = gov_change_legion_law
					value = 2
				}			
			}
		}
		scope:old_ruler.family = { move_family = scope:old_country } # Move Old ruler and his family to old country
		scope:old_ruler = {
			move_country_with_entire_family_effect = { COUNTRY = scope:old_country }
		}
		every_family = {
			limit = {
				NOT = { 
					THIS = scope:new_ruler.family 
				}
			}
			move_family = scope:old_country
			head_of_family = {
				move_country_with_entire_family_effect = { COUNTRY = scope:old_country }			
			}
		}
		every_character = {
			limit = {
				is_minor_character = yes
				NOR = {
					is_close_relative = scope:new_ruler
					trigger_if = {
						limit = { is_married = yes }
						spouse.family = scope:new_ruler.family
					}
				}
			}
			move_country_with_close_family_effect = { COUNTRY = scope:old_country }
		}
		every_owned_province = {
			limit = {
				NOR = {
					is_in_area = $AREA_1$	#CANT MAKE THIS MODULAR, will be different each time depending on what land you want.
					is_in_area = $AREA_2$
				}
			}
			set_owned_by = scope:old_country
		}
		scope:old_country = {
			set_as_ruler = scope:old_ruler
			add_manpower = 15
			add_treasury = 500
		}
		if = {
			limit = { has_variable = gov_change_legion_law }
			if = {
				limit = { var:gov_change_legion_law = 1 }
				change_law = work_for_the_best
			}
			else_if = {
				limit = { var:gov_change_legion_law = 2 }
				change_law = standing_army_law
			}
			remove_variable = gov_change_legion_law
		}
		every_legion = {
			save_scope_as = old_legion_scope
			every_legion_commander = {
				save_scope_as = old_commander_scope
				scope:old_legion_scope = { remove_commander = scope:old_commander_scope }
			}
			move_legion = scope:old_country.capital_scope.governorship
			#change owner?
		}
		every_navy = { add_to_list = old_army_list }
		every_in_list  = {
			list = old_army_list
			if = {
				limit = { exists = commander }
				commander = { remove_all_positions = yes }			
			}
			change_unit_owner = scope:old_country
		}
		#This is the way vanilla does it, I feel like I should check what subject type they are so they get the right one after...but idk.
		every_subject = {
			ROOT = {
				release_subject = PREV
			}
			scope:old_country = {
				make_subject = {
					target = PREV
					type = feudatory
				}
			}
		}
		every_province = {
			remove_claim = ROOT
		}
		#Vanilla does this, it seems pointless but ima do it anyway.
		change_country_name = $OLD_COUNTRY_NAME$
		change_country_adjective = $OLD_COUNTRY_ADJ$
	}
}