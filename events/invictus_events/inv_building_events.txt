namespace = inv_building_events

# Military Building events use ids 1-25

# Crumbling Fortress
inv_building_events.1 = {
    type = country_event
    title = inv_building_events.1.t
    desc = inv_building_events.1.desc
    picture = greek_states_path_6_event
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = military_building_cooldown }
    	any_owned_province = {
    		num_of_fortress_building > 1
    		province_income < 3
    	}
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = very_long_cooldown
        }
        save_owned_province = {
            limit = "num_of_fortress_building > 1 province_income < 3"
            scope = "building_province"
        }
    }

    option = {
        name = inv_building_events.1.a
    }
    option = {
        name = inv_building_events.1.b
    }
}

# Sabotaged Fortress
inv_building_events.2 = {
    type = country_event
    title = inv_building_events.2.t
    desc = inv_building_events.2.desc
    picture = greek_states_path_6_event
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = military_building_cooldown }
    	any_owned_province = {
            num_of_fortress_building > 1
            OR = {
                province_unrest > 2
                any_neighbor_province = {
                    exists = owner
                    NOT = { owner = root }
                    owner = {
                        opinion = {
                            target = root
                            value < 25
                        }
                    }
                }
            }
    	}
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = very_long_cooldown
        }
        save_owned_province = {
            limit = "
                num_of_fortress_building > 1
                OR = {
                    province_unrest > 2
                    any_neighbor_province = {
                        exists = owner
                        NOT = { owner = root }
                        owner = {
                            opinion = {
                                target = root
                                value < 25
                            }
                        }
                    }
                }
            "
            scope = "building_province"
        }
    }

    option = {
        name = inv_building_events.2.a
    }
    option = {
        name = inv_building_events.2.b
    }
}

# Local Fortifications Master
inv_building_events.3 = {
    type = country_event
    title = inv_building_events.3.t
    desc = inv_building_events.3.desc
    picture = greek_states_path_6_event
    goto_location = scope:building_province
    left_portrait = current_ruler
    right_portrait = scope:fort_guy

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            num_of_fortress_building > 1
            governor_policy = borderlands
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "num_of_fortress_building > 1 governor_policy = borderlands"
            scope = "building_province"
        }
        scope:building_province = {
            if = {
                limit = {
                    exists = holding_owner
                }
                save_scope_as = fort_guy
            }
            else_if = {
                limit = {
                    exists = governor
                    NOT = { governor = current_ruler }
                }
                save_scope_as = fort_guy
            }
            else = {
                root = {
                    create_character = {
                        female = no
                        good_finesse_trait_effect = yes
                        save_scope_as = fort_guy
                    }
                }
            }
        }
    }

    option = {
        name = inv_building_events.3.a
    }
    option = {
        name = inv_building_events.3.b
    }
}

# Fires at the Fort
inv_building_events.4 = {
    type = country_event
    title = inv_building_events.4.t
    desc = inv_building_events.4.desc
    picture = Event_fire_city

    goto_location = scope:burning_fort_province
    left_portrait = current_ruler
    right_portrait = scope:pyromaniac_adminitrator

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            num_of_fortress_building > 1
            OR = {
                AND = {
                    exists = governor_or_ruler
                    governor_or_ruler = { has_trait = pyromaniac }
                }
                AND = {
                    exists = holding_owner
                    holding_owner = { has_trait = pyromaniac }
                }
            }
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "
                OR = {
                    AND = {
                        exists = governor_or_ruler
                        governor_or_ruler = { has_trait = pyromaniac }
                    }
                    AND = {
                        exists = holding_owner
                        holding_owner = { has_trait = pyromaniac }
                    }
                }
            "
            scope = "burning_fort_province"
        }
        scope:burning_fort_province = {
            if = {
                limit = {
                    exists = holding_owner
                    holding_owner = { has_trait = pyromaniac }
                }
                save_scope_as = pyromaniac_adminitrator
            }
            else_if = {
                limit = {
                    exists = governor_or_ruler
                    governor_or_ruler = { has_trait = pyromaniac }
                }
                save_scope_as = pyromaniac_adminitrator
            }
        }
    }
    option = {
        name = inv_building_events.4.a
    }
    option = {
        name = inv_building_events.4.b
    }
}

# Impenetrable Defenses (fort ramparts)
inv_building_events.5 = {
    type = country_event
    title = inv_building_events.5.t
    desc = inv_building_events.5.desc
    picture = greek_seleucid_path_6_event
    goto_location = scope:building_province
    
    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            has_building = fortress_ramparts_building
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "has_building = fortress_ramparts_building"
            scope = "building_province"
        }
    }

    option = {      
        name = inv_building_events.5.a
    }
    option = {      
        name = inv_building_events.5.b
    }
}

# Ramparts collapse
inv_building_events.6 = {
    type = country_event
    title = inv_building_events.6.t
    desc = inv_building_events.6.desc
    picture = greek_seleucid_path_6_event
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            has_building = fortress_ramparts_building
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "has_building = fortress_ramparts_building"
            scope = "building_province"
        }
        ordered_pops_in_province = {
            max = 3
            order_by = pop_hapiness
            kill_pop = yes
        }
    }

    option = {      
        name = inv_building_events.6.a
    }
    option = {      
        name = inv_building_events.6.b
    }
}

# Favorable Conditions at Sea
inv_building_events.7 = {
    type = country_event
    title = inv_building_events.7.t
    desc = inv_building_events.7.desc
    picture = trade_port
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            num_of_port_building > 1
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "num_of_port_building > 1"
            scope = "building_province"
        }
    }

    option = {      
        name = inv_building_events.7.a
    }
    option = {      
        name = inv_building_events.7.b
    }
}

# Breakdown in harbor management in [building_province]
inv_building_events.8 = {
    type = country_event
    title = inv_building_events.8.t
    desc = inv_building_events.8.desc
    picture = trade_port
    goto_location = scope:building_province
    left_portrait = scope:port_manager
    right_portrait = current_ruler

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            num_of_port_building > 1
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "num_of_port_building > 1"
            scope = "building_province"
        }
        scope:building_province = {
            if = {
                limit = {
                    exists = holding_owner
                }
                holding_owner = { save_scope_as = port_manager }
            }
            else = {
                create_character = {
                    female = no
                    good_popularity_trait_effect = yes
                    save_scope_as = port_manager
                }
            }
        }
    }

    option = {      
        name = inv_building_events.8.a
    }
    option = {      
        name = inv_building_events.8.b
    }
}

# Rat Infestation in the Port of [building_province]
inv_building_events.9 = {
    type = country_event
    title = inv_building_events.9.t
    desc = inv_building_events.9.desc
    picture = interesting_histories_greek_port
    
    goto_location = scope:building_province
    left_portrait = scope:port_manager
    right_portrait = current_ruler

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            num_of_port_building > 1
            province_income < 3
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "num_of_port_building > 1 province_income < 3"
            scope = "building_province"
        }
        scope:building_province = {
            if = {
                limit = {
                    exists = holding_owner
                }
                holding_owner = { save_scope_as = port_manager }
            }
            else = {
                create_character = {
                    female = no
                    bad_popularity_trait_effect = yes
                    save_scope_as = port_manager
                }
            }
        }
    }

    option = {      
        name = inv_building_events.9.a
    }
    option = {      
        name = inv_building_events.9.b
    }
}

# Expert Shipbuilders of [building_province]
inv_building_events.10 = {
    type = country_event
    title = inv_building_events.10.t
    desc = inv_building_events.10.desc
    picture = greek_antigonid_path_2_event
    goto_location = scope:building_province
    left_portrait = scope:port_manager
    right_portrait = current_ruler

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            num_of_port_building > 1
            province_income < 3
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "num_of_port_building > 1 province_income < 3"
            scope = "building_province"
        }
        scope:building_province = {
            if = {
                limit = {
                    exists = holding_owner
                }
                holding_owner = { save_scope_as = port_manager }
            }
            else = {
                create_character = {
                    female = no
                    good_finesse_trait_effect = yes
                    save_scope_as = port_manager
                }
            }
        }
    }

    option = {      
        name = inv_building_events.10.a
    }
    option = {      
        name = inv_building_events.10.b
    }
}

# Sails set Fire in the ports of [burning_port_province]
inv_building_events.11 = {
    type = country_event
    title = inv_building_events.11.t
    desc = inv_building_events.11.desc
    picture = Event_fire_city
    goto_location = scope:burning_port_province
    left_portrait = scope:pyromaniac_adminitrator
    right_portrait = current_ruler

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            num_of_port_building >= 1
            OR = {
                AND = {
                    exists = governor_or_ruler
                    governor_or_ruler = { has_trait = pyromaniac }
                }
                AND = {
                    exists = holding_owner
                    holding_owner = { has_trait = pyromaniac }
                }
            }
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "
                OR = {
                    AND = {
                        exists = governor_or_ruler
                        governor_or_ruler = { has_trait = pyromaniac }
                    }
                    AND = {
                        exists = holding_owner
                        holding_owner = { has_trait = pyromaniac }
                    }
                }
            "
            scope = "burning_port_province"
        }
        scope:burning_port_province = {
            if = {
                limit = {
                    exists = holding_owner
                    holding_owner = { has_trait = pyromaniac }
                }
                save_scope_as = pyromaniac_adminitrator
            }
            else_if = {
                limit = {
                    exists = governor_or_ruler
                    governor_or_ruler = { has_trait = pyromaniac }
                }
                save_scope_as = pyromaniac_adminitrator
            }
        }
    }

    option = {      
        name = inv_building_events.11.a
    }
    option = {      
        name = inv_building_events.11.b
    }
}

# Drunken rampage by the men at the barracks in [building_province]
inv_building_events.12 = {
    type = country_event
    title = inv_building_events.12.t
    desc = inv_building_events.12.desc
    picture = latin_tribal_path_4_event
    goto_location = scope:building_province
    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            has_building = barracks_building
            province_manpower_income >= 5 
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "has_building = barracks_building province_manpower_income >= 5 "
            scope = "building_province"
        }
    }

    option = {      
        name = inv_building_events.12.a
    }
    option = {      
        name = inv_building_events.12.b
    }
}

# [governor_dude] training with the troops of [building_province]
inv_building_events.13 = {
    type = country_event
    title = inv_building_events.13.t
    desc = inv_building_events.13.desc
    picture = latin_roman_path_end_bonus_event
    goto_location = scope:building_province
    left_portrait = current_ruler
    right_portrait = scope:governor_dude
    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            has_building = barracks_building
            province_manpower_income >= 3
            exists = governor
            NOT = { governor = current_ruler }
            governor = {
                highest_skill = martial
                martial >= 8
            }
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "has_building = barracks_building province_manpower_income >= 3 "
            scope = "building_province"
        }
        governor = { save_scope_as = governor_dude }
    }

    option = {      
        name = inv_building_events.13.a
    }
    option = {      
        name = inv_building_events.13.b
    }
}

# Highly respected soldier challenges governor of [building_province.GetGovernorship.GetName]
inv_building_events.14 = {
    type = country_event
    title = inv_building_events.14.t
    desc = inv_building_events.14.desc
    picture = latin_support_path_end_bonus_event
    
    goto_location = scope:building_province
    left_portrait = scope:badass_soldier
    right_portrait = scope:bitch_ass_governor

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            has_building = barracks_building
            province_manpower_income >= 3
            exists = governor
            NOT = { governor = current_ruler }
            governor = {
                highest_skill = martial
                martial >= 8
            }
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "has_building = barracks_building province_manpower_income >= 3 "
            scope = "building_province"
        }
        governor = { save_scope_as = bitch_ass_governor }
        create_character = {
            female = no
            positive_martial_trait_effect = yes
            add_martial = 2
            save_scope_as = badass_soldier
        }
    }

    option = {  # Let them fight   
        name = inv_building_events.14.a
    }
    option = {  # This "soldier" is out of line...have him executed
        name = inv_building_events.14.b
    }
}

# Barracks drills in [building_province] using new innovative methods
inv_building_events.15 = {
    type = country_event
    title = inv_building_events.15.t
    desc = inv_building_events.15.desc
    picture = greek_seleucid_path_2_event
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = barracks_drill_event_happened }
        any_owned_province = {
            has_building = barracks_building
            province_manpower_income >= 3
        }
    }

    immediate = {
        set_variable = barracks_drill_event_happened
        save_owned_province = {
            limit = "has_building = barracks_building province_manpower_income >= 5 "
            scope = "building_province"
        }
    }

    option = {      
        name = inv_building_events.15.a
    }
    option = {      
        name = inv_building_events.15.b
    }
}

# Foundry of [building_province] is thriving
inv_building_events.16 = {
    type = country_event
    title = inv_building_events.16.t
    desc = inv_building_events.16.desc
    picture = north_african_army_path_4_event
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            has_building = foundry_building
            province_income >= 3
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = medium_cooldown
        }
        save_owned_province = {
            limit = "has_building = foundry_building province_income >= 3"
            scope = "building_province"
        }
    }

    option = {      
        name = inv_building_events.16.a
    }
    option = {      
        name = inv_building_events.16.b
    }
}

# [building_province] producing the finest arms/armour in [country]
inv_building_events.17 = {
    type = country_event
    title = inv_building_events.17.t
    desc = {
        first_valid = {
            triggered_desc = {
                trigger = { var:foundry_type = flag:weapons }
                desc = "inv_building_events.17.desc.1"
            }
            triggered_desc = {
                trigger = { var:foundry_type = flag:armour }
                desc = "inv_building_events.17.desc.2"
            }
        }
    }
    picture = latin_tribal_path_1_event
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            has_building = foundry_building
            province_income >= 3
        }
    }

    immediate = {
        hidden_effect = {
            random_list = {
                1 = {
                    set_variable = {
                        name = foundry_type
                        value = flag:weapons
                    }
                }
                1 = {
                    set_variable = {
                        name = foundry_type
                        value = flag:armour
                    }
                }
            }
        }
        set_variable = {
            name = military_building_cooldown
            days = medium_cooldown
        }
        save_owned_province = {
            limit = "has_building = foundry_building province_income >= 3"
            scope = "building_province"
        }
    }

    option = {      
        name = inv_building_events.17.a
    }
    option = {      
        name = inv_building_events.17.b
    }
    after = {
        remove_variable = foundry_type
    }
}

# Slaves kill foundry master in [building_province]
inv_building_events.18 = {
    type = country_event
    title = inv_building_events.18.t
    desc = inv_building_events.18.desc
    picture = proscription
    goto_location = scope:building_province
    right_portrait = scope:murdered_master
    left_portrait = current_ruler
    trigger = {
        NOT = { has_variable = military_building_cooldown }
        any_owned_province = {
            has_building = foundry_building
            num_of_slaves >= 5
        }
    }

    immediate = {
        set_variable = {
            name = military_building_cooldown
            days = very_long_cooldown
        }
        save_owned_province = {
            limit = "has_building = foundry_building num_of_slaves >= 5"
            scope = "building_province"
        }
        hidden_effect = {
            create_character = {
                female = no
                save_scope_as = murdered_master
            }
        }
        scope:murdered_master = {
            death = {
                death_reason = death_decapitated
            }
        }
    }

    option = {      
        name = inv_building_events.18.a
    }
    option = {      
        name = inv_building_events.18.b
    }
}

# End of Military Buildings, some room for more if needed

# Economical / Management Building events use ids 26-40

# Leaky Aqueducts in [building_province]
inv_building_events.26 = {
    type = country_event
    title = inv_building_events.26.t
    desc = inv_building_events.26.desc
    picture = aqueducts
    right_portrait = scope:aqueduct_governor
    goto_location = scope:building_province
    trigger = {
        NOT = { has_variable = economy_building_cooldown }
        any_owned_province = {
            num_of_aqueduct_building >= 2
            province_unrest > 2
        }
        exists = governor_or_ruler
    }

    immediate = {
        set_variable = {
            name = economy_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "num_of_aqueduct_building >= 2 province_unrest > 2"
            scope = "building_province"
        }
        scope:building_province.governor_or_ruler = { save_scope_as = aqueduct_governor }
    }

    option = {      
        name = inv_building_events.26.a
    }
    option = {      
        name = inv_building_events.26.b
    }
}

# Aqueducts in [building_province] have been sabotaged!
inv_building_events.27 = {
    type = country_event
    title = inv_building_events.27.t
    desc = inv_building_events.27.desc
    picture = aqueducts
    goto_location = scope:building_province
    trigger = {
        NOT = { has_variable = economy_building_cooldown }
        any_owned_province = {
            num_of_aqueduct_building >= 2
            province_unrest > 2
        }
    }

    immediate = {
        set_variable = {
            name = economy_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "num_of_aqueduct_building >= 2 province_unrest > 2"
            scope = "building_province"
        }
        while = {
            limit = {
                scope:building_province = {
                    has_building = aqueduct_building
                }
            }
            remove_building_level = aqueduct_building
        }
    }

    option = {      
        name = inv_building_events.27.a
    }
    option = {      
        name = inv_building_events.27.b
    }
}

# Aqueducts in [building_province] brings prosperity
inv_building_events.28 = {
    type = country_event
    title = inv_building_events.28.t
    desc = inv_building_events.28.desc
    picture = aqueducts
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = economy_building_cooldown }
        any_owned_province = {
            num_of_aqueduct_building >= 2
            province_unrest > 2
        }
    }

    immediate = {
        set_variable = {
            name = economy_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "num_of_aqueduct_building >= 2 province_unrest > 2"
            scope = "building_province"
        }
    }

    option = {      
        name = inv_building_events.28.a
    }
}

# The [SCOPE.sCharacter('dead_priest').GetOffice.GetName] is murdered while visiting the temples at [building_province]
inv_building_events.29 = {
    type = country_event
    title = inv_building_events.29.t
    desc = inv_building_events.29.desc
    picture = interesting_histories_greek_city_temple
    goto_location = scope:building_province
    right_portrait = scope:dead_priest
    left_portrait = current_ruler

    trigger = {
        any_character = {
            OR = {
                has_office = office_pontifex
                has_office = office_high_priest
                has_office = office_high_priest_monarchy
            }
        }
        NOT = { has_variable = economy_building_cooldown }
        any_owned_province = {
            religion = root.religion
            has_building = temple_building
            province_unrest > 2
        }
    }

    immediate = {
        set_variable = {
            name = economy_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "
                religion = root.religion
                has_building = temple_building
                province_unrest > 2
            "
            scope = "building_province"
        }
        save_character = {
            limit = "
                OR = {
                    has_office = office_pontifex
                    has_office = office_high_priest
                    has_office = office_high_priest_monarchy
                }
            "
            scope = "dead_priest"
        }
    }

    option = {      
        name = inv_building_events.29.a
    }
    option = {      
        name = inv_building_events.29.b
    }
}

# Local Festival at the temple of [building_province]
inv_building_events.30 = {
    type = country_event
    title = inv_building_events.30.t
    desc = inv_building_events.30.desc
    picture = interesting_histories_greek_city_temple
    goto_location = scope:building_province
    trigger = {
        NOT = { has_variable = economy_building_cooldown }
        any_owned_province = {
            religion = root.religion
            has_building = temple_building
        }
    }

    immediate = {
        set_variable = {
            name = economy_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "
                religion = root.religion
                has_building = temple_building
            "
            scope = "building_province"
        }
    }

    option = {      
        name = inv_building_events.30.a
    }
    option = {      
        name = inv_building_events.30.b
    }
}

# Lightning Strikes the temple of [building_province]!
inv_building_events.31 = {
    type = country_event
    title = inv_building_events.31.t
    desc = inv_building_events.31.desc
    picture = interesting_histories_greek_city_temple
    goto_location = scope:building_province
    trigger = {
        NOT = { has_variable = economy_building_cooldown }
        any_owned_province = {
            religion = root.religion
            has_building = temple_building
        }
    }

    immediate = {
        set_variable = {
            name = economy_building_cooldown
            days = long_cooldown
        }
        save_owned_province = {
            limit = "
                religion = root.religion
                has_building = temple_building
            "
            scope = "building_province"
        }
        scope:building_province = {
            remove_building_level = temple_building
        }
    }

    option = { # 
        name = inv_building_events.31.a
    }
    option = {      
        name = inv_building_events.31.b
    }
}

# Granaries overflowing and nearby states could use more food!
inv_building_events.32 = {
    type = country_event
    title = inv_building_events.32.t
    desc = inv_building_events.32.desc
    picture = farming
    
    goto_location = scope:helping_prov
    
    trigger = {
        NOT = { has_variable = economy_building_cooldown }
        any_country_state = {
            has_state_food >= 1200
            granaries_in_state >= 2
            state_food_current >= state_food_max
            area = {
                any_neighbor_area = {
                    any_area_province = {
                        count = all
                        filter = {
                            owner = root
                        }
                        state = {
                            has_state_food <= low_state_food
                        }
                    }
                }
            }
        }
    }

    immediate = {
        set_variable = {
            name = economy_building_cooldown
            days = long_cooldown
        }
        random_country_state = {
            limit = {
                has_state_food > 1200
                granaries_in_state >= 2
                state_food_current >= state_food_max
            }
            area = {
                random_neighbor_area = {
                    limit = {
                        any_area_province = {
                            count = all
                            filter = {
                                owner = root
                            }
                            state = {
                                has_state_food < low_state_food
                            }
                        }
                    }
                    random_area_province = {
                        state = {
                            save_scope_as = state_to_help
                            capital_scope = {
                                save_scope_as = prov_to_help
                            }
                        }
                    }
                }
            }
            save_scope_as = helping_state
            capital_scope = {
                save_scope_as = helping_prov
            }
        }
    }

    option = {      
        name = inv_building_events.32.a
    }
    option = {      
        name = inv_building_events.32.b
    }
}

# Mold in the storage of granaries in [building_state.GetName]!
inv_building_events.33 = {
    type = country_event
    title = inv_building_events.33.t
    desc = inv_building_events.33.desc
    picture = bakery
    
    left_portrait = current_ruler
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = economy_building_cooldown }
        any_country_state = {
            any_state_province = {
                count >= 2
                num_of_population_building >= 2
            }
        }
    }

    immediate = {
        set_variable = {
            name = economy_building_cooldown
            days = long_cooldown
        }
        random_country_state = {
            limit = {
                any_state_province = {
                    count >= 2
                    num_of_population_building >= 2
                }
            }
            random_state_province = {
                limit = {
                    num_of_population_building >= 2
                }
                save_scope_as = building_province
            }
            save_scope_as = building_state
        }
    }

    option = {      
        name = inv_building_events.33.a
    }
    option = {      
        name = inv_building_events.33.b
    }
}

# Mobs overrun the grannaries in [building_province]
inv_building_events.34 = {
    type = country_event
    title = inv_building_events.34.t
    desc = {
        first_valid = {
            triggered_desc = {
                trigger = {
                    NOT = { has_variable = governor_killed }
                }
                # [corrupt_governor] barely escaped mob with [GetHerHis] life
                desc = "inv_building_events.34.desc_1"
            }
            triggered_desc = {
                trigger = { has_variable = governor_killed }
                # [corrupt_governor] killed by mob
                desc = "inv_building_events.34.desc_2"
            }
        }
    }
    picture = revolt
    goto_location = scope:building_province
    left_portrait = current_ruler
    right_portrait = scope:corrupt_governor

    trigger = {
        NOT = { has_variable = economy_building_cooldown }
        any_owned_province = {
            state_loyalty < 20
            num_of_population_building >= 3
            exists = governor
            state = {
                has_state_food <= low_state_food
            }
            governor = {
                NOT = { this = current_ruler }
                corruption > 10
            }
        }
    }

    immediate = {
        set_variable = {
            name = economy_building_cooldown
            days = long_cooldown
        }
        random_owned_province = {
            limit = {
                state_loyalty < 20
                num_of_population_building >= 3
                exists = governor
                state = {
                    has_state_food <= low_state_food
                }
                governor = {
                    NOT = { this = current_ruler }
                    corruption > 10
                }
            }
            save_scope_as = building_province
            governor = {
                save_scope_as = corrupt_governor
            }
        }
        hidden_effect = {
            random = {
                chance = 15
                modifier = {
                    factor = 0.5
                    trigger = {
                        scope:corrupt_governor = {
                            corruption > 25
                        }
                    }
                }
                modifier = {
                    factor = 0.5
                    trigger = {
                        scope:building_province = {
                            state_loyalty < 10
                        }
                    }
                }
                modifier = {
                    factor = 0.5
                    trigger = {
                        scope:building_province = {
                            has_state_food <= low_state_food
                        }
                    }
                }
                set_variable = governor_killed
                scope:corrupt_governor = {
                    random_death = yes
                }
            }
        }
    }

    option = {      
        name = inv_building_events.34.a
    }
    option = {      
        name = inv_building_events.34.b
    }
    after = {
        remove_variable = governor_killed
    }
}


# End of Economical / Management, some room for more if needed

# Population Building events use ids 41-75


# Noble murdered by a freemen at the theater in [building_province]
inv_building_events.41 = {
    type = country_event
    title = inv_building_events.41.t
    desc = inv_building_events.41.desc
    picture = interesting_histories_greek_city_temple
    goto_location = scope:building_province
    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            freemen_happiness <= 0.60
            num_of_freemen >= 3
            num_of_nobles >= 3
            has_building = theathre_building
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = very_long_cooldown
        }
        random_owned_province = {
            limit = {
                freemen_happiness <= 0.60
                num_of_freemen >= 3
                num_of_nobles >= 3
                has_building = theathre_building
            }
            save_scope_as = building_province
            random_nobles = {
                kill_pop = yes
            }
        }
    }

    option = {      
        name = inv_building_events.41.a
    }
    option = {      
        name = inv_building_events.41.b
        # Take revenge on the freemen, they are too free!
        scope:building_province = {
            ordered_freemen = {
                max = 2
                order_by = pop_hapiness
                kill_pop = yes
            }
        }
    }
}

# Theater in [building_province] attracting nobles from [neighbor_country]
inv_building_events.42 = {
    type = country_event
    title = inv_building_events.42.t
    desc = {
        first_valid = {
            triggered_desc = {
                trigger = {
                    NOT = { has_variable = neighbor_mad }
                }
                desc = "inv_building_events.42.desc"
            }
            triggered_desc = {
                # Neighbor wants to fight you (maybe)
                trigger = {
                    has_variable = neighbor_mad
                }
                desc = "inv_building_events.42.desc.2"
            }
        }
    }
    picture = city_province
    goto_location = scope:building_province
    left_portrait = current_ruler
    right_portrait = scope:neighbor.current_ruler

    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            num_of_nobles >= 3
            has_building = theathre_building
            any_neighbor_province = {
                num_of_nobles >= 2
                num_of_nobles < 15
                owner = {
                    NOR = {
                        this = root
                        is_subject_of = root
                    }
                }
            }
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = long_cooldown
        }
        set_variable = {
            name = num_nobles_moved
            value = 0
        }
        random_owned_province = {
            limit = {
                num_of_nobles >= 3
                has_building = theathre_building
                any_neighbor_province = {
                    num_of_nobles >= 2
                    num_of_nobles < 15
                    owner = {
                        NOR = {
                            this = root
                            is_subject_of = root
                        }
                    }
                }
            }
            save_scope_as = building_province
            random_neighbor_province = {
                limit = {
                    num_of_nobles >= 2 
                    owner = {
                        NOR = {
                            this = root
                            is_subject_of = root
                        }
                    }
                }
                save_scope_as = neighbor_province
                owner = {
                    save_scope_as = neighbor
                }
            }
        }
        hidden_effect = {
            scope:neighbor_province = {
                ordered_nobles  = {
                    max = {
                        value = {
                            integer_range = {
                                min = 1
                                max = {
                                    value = prev.num_of_nobles
                                    divide = {
                                        value = {
                                            integer_range = {
                                                min = 3
                                                max = 4
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    move_pop = scope:building_province
                    root = {
                        change_variable = {
                            name = num_nobles_moved
                            add = 1
                        }
                    }
                }
            }
        }
        if = {
            limit = {
                var:num_nobles_moved >= 3
                scope:neighbor = {
                    opinion = {
                        target = root
                        value < 0
                    }
                }
            }
            set_variable = neighbor_mad
        }
    }

    option = {      
        name = inv_building_events.42.a
        # Nice we can use the new people!
    }
    option = {      
        name = inv_building_events.42.b
        # [neighbor.GetRuler] is mad we are taking their people...this may mean war...
        trigger = {
            has_variable = neighbor_mad
        }
        highlight = yes
    }
    after = {
        remove_variable = num_nobles_moved
        remove_variable = neighbor_mad
    }
}

# Drama/Tragedy/Comedy/Satyr play in theater of [building_province] was so bad the crowd murdered all the actors and went on a rampage
inv_building_events.43 = {
    type = country_event
    title = inv_building_events.43.t
    desc = {
        first_valid = {
            triggered_desc = {
                trigger = {
                    var:play_type = flag:drama
                }
                desc = "inv_building_events.43_drama"
            }
            triggered_desc = {
                trigger = {
                    var:play_type = flag:tragedy
                }
                desc = "inv_building_events.43_tragedy"
            }
            triggered_desc = {
                trigger = {
                    var:play_type = flag:comedy
                }
                desc = "inv_building_events.43_comedy"
            }
            triggered_desc = {
                trigger = {
                    var:play_type = flag:satyr
                }
                desc = "inv_building_events.43_satyr"
            }
        }
    }
    picture = greek_theater
    goto_location = scope:building_province
    left_portrait = current_ruler
    right_portrait = scope:theater_governor

    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            nobles_happiness < 0.75
            num_of_nobles >= 3
            has_building = theathre_building
            NOT = {
                this.governorship = root.capital_scope.governorship
            }
            exists = governor
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = very_long_cooldown
        }
        random_owned_province = {
            limit = {
                nobles_happiness < 0.75
                num_of_nobles >= 3
                has_building = theathre_building
                NOT = {
                    this.governorship = root.capital_scope.governorship
                }
            }
            save_scope_as = building_province
            governor = {
                save_scope_as = theater_governor
            }
        }
        hidden_effect = {
            random_list = {
                1 = {
                    set_variable = {
                        name = play_type
                        value = flag:drama
                    }
                }
                1 = {
                    set_variable = {
                        name = play_type
                        value = flag:tragedy
                    }
                }
                1 = {
                    set_variable = {
                        name = play_type
                        value = flag:comedy
                    }
                }
                1 = {
                    set_variable = {
                        name = play_type
                        value = flag:satyr
                    }
                }
            }
        }
    }

    option = {      
        name = inv_building_events.43.a
    }
    option = {      
        name = inv_building_events.43.b
    }
    after = {
        remove_variable = play_type
    }
}

# [assimilating_culture] people destroy sacred [primary_culture] books in the library of [building_province]
inv_building_events.44 = {
    type = country_event
    title = inv_building_events.44.t
    desc = inv_building_events.44.desc
    picture = great_library
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            this.governorship = root.capital_scope.governorship
            num_of_library_building >= 2
            any_pops_in_province = {
                percent >= 25
                country_culture = {
                    is_integrated = no
                }
            }
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = very_long_cooldown
        }
        random_owned_province = {
            limit = {
                this.governorship = root.capital_scope.governorship
                num_of_library_building >= 2
                any_pops_in_province = {
                    percent >= 25
                    country_culture = {
                        is_integrated = no
                    }
                }
            }
            save_scope_as = building_province
            random_pops_in_province = {
                limit = {
                    country_culture = { is_integrated = no }
                }
                culture = {
                    save_scope_as = assimilating_culture
                }
            }
            remove_building_level = library_building
        }
    }

    option = {      
        name = inv_building_events.44.a
    }
    option = {      
        name = inv_building_events.44.b
    }
}

# Great thinkers in [building_province] come up with revolutionary (science/philosophy/medicine) ideas
inv_building_events.45 = {
    type = country_event
    title = inv_building_events.45.t
    desc = {
        first_valid = {
            triggered_desc = {
                trigger = {
                    var:idea_type = flag:science
                }
                desc = "inv_building_events.45_science"
            }
            triggered_desc = {
                trigger = {
                    var:idea_type = flag:philosophy
                }
                desc = "inv_building_events.45_philosophy"
            }
            triggered_desc = {
                trigger = {
                    var:idea_type = flag:medicine
                }
                desc = "inv_building_events.45_medicine"
            }
        }
    }
    picture = great_library
    goto_location = scope:building_province
    left_portrait = scope:building_governor
    right_portrait = scope:great_thinker
    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            num_of_library_building >= 3
            exists = governor
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = very_long_cooldown
        }
        random_owned_province = {
            limit = { num_of_library_building >= 3 }
            save_scope_as = building_province
            governor = {
                save_scope_as = building_governor
            }
        }
        hidden_effect = {
            random_list = {
                1 = {
                    set_variable = {
                        name = idea_type
                        value = flag:science
                    }
                }
                1 = {
                    set_variable = {
                           name = idea_type
                           value = flag:philosophy
                       }
                }
                1 = {
                    set_variable = {
                           name = idea_type
                           value = flag:medicine
                       }
                }
            }
            create_character = {
                female = no
                age = 60
                add_finesse = 4
                add_zeal = 3
                save_scope_as = great_thinker
            }
        }
    }

    option = {      
        name = inv_building_events.45.a
    }
    option = {      
        name = inv_building_events.45.b
    }
}

# Dangerous idea brewing in the academies of [building_province]
inv_building_events.46 = {
    type = country_event
    title = inv_building_events.46.t
    desc = inv_building_events.46.desc
    picture = city_province
    goto_location = scope:building_province
    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            has_building = academy_building
            OR = {
                province_unrest > 2
                state_loyalty < 25
            }
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = very_long_cooldown
        }
        random_owned_province = {
            limit = {
                has_building = academy_building
                OR = {
                    province_unrest > 2
                    state_loyalty < 25
                }
            }
            save_scope_as = building_province
        }
    }

    option = {      
        name = inv_building_events.46.a
    }
    option = {      
        name = inv_building_events.46.b
    }
}

# New ideas and new perspectives emerging in the academies of [building_province]
inv_building_events.47 = {
    type = country_event
    title = inv_building_events.47.t
    desc = inv_building_events.47.desc
    picture = city_province
    goto_location = scope:building_province
    trigger = {
        NOT = { has_variable = academy_boon_event_happened }
        current_date > 475.1.1
        any_owned_province = {
            has_building = academy_building
        }
    }

    immediate = {
        set_variable = academy_boon_event_happened
        random_owned_province = {
            limit = {
                has_building = academy_building
            }
            save_scope_as = building_province
        }
    }

    option = {      
        name = inv_building_events.47.a
        add_innovation = 1
    }
    option = {      
        name = inv_building_events.47.b
        add_innovation = 1
    }
}

# [building_governor.GetName] murdered in the markets of [building_province.GetName] in cold blood
inv_building_events.48 = {
    type = country_event
    title = inv_building_events.48.t
    desc = inv_building_events.48.desc
    picture = greek_states_path_7_event
    left_portrait = current_ruler
    right_portrait = scope:building_governor
    goto_location = scope:building_province
    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            has_building = commerce_building
            NOT = {
                this.governorship = root.capital_scope.governorship
            }
            exists = governor
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = very_long_cooldown
        }
        random_owned_province = {
            limit = {
                has_building = commerce_building
                NOT = {
                    this.governorship = root.capital_scope.governorship
                }
                exists = governor
            }
            save_scope_as = building_province
            governor = {
                save_scope_as = building_governor
            }
        }
    }

    option = {      
        name = inv_building_events.48.a
    }
    option = {      
        name = inv_building_events.48.b
    }
}

# Markets of [building_province.GetName] are thriving
inv_building_events.49 = {
    type = country_event
    title = inv_building_events.49.t
    desc = inv_building_events.49.desc
    picture = trade_port
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            has_building = commerce_building
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = long_cooldown
        }
        random_owned_province = {
            limit = {
                has_building = commerce_building
            }
            save_scope_as = building_province
        }
    }

    option = {      
        name = inv_building_events.49.a
    }
    option = {      
        name = inv_building_events.49.b
    }
}

# [politician_on_trial.GetName] being tried in courts of [building_province.GetName] on corruption charges
inv_building_events.50 = {
    type = country_event
    title = inv_building_events.50.t
    desc = inv_building_events.50.desc
    picture = greek_court
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_politician = {
            corruption > 25
        }
        any_owned_province = {
            has_building = court_building
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = long_cooldown
        }
        random_politician = {
            limit = {
                corruption > 25
            }
            save_scope_as = politician_on_trial
        }
        random_owned_province = {
            limit = {
                has_building = court_building
            }
            save_scope_as = building_province
        }
    }

    option = {      
        name = inv_building_events.50.a
    }
    option = {      
        name = inv_building_events.50.b
    }
}

# The corruption of [building_governor.GetName] and has reached a boiling point in [building_province.GetName]
inv_building_events.51 = {
    type = country_event
    title = inv_building_events.51.t
    desc = inv_building_events.51.desc
    picture = greek_court
    goto_location = scope:building_province
    left_portrait = scope:building_governor
    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            has_building = court_building
            governor = {
                corruption > 25
            }
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = long_cooldown
        }
        random_owned_province = {
            limit = {
                has_building = court_building
                governor = {
                    corruption > 25
                }
            }
            save_scope_as = building_province
            governor = {
                save_scope_as = building_governor
            }
        }
    }

    option = {      
        name = inv_building_events.51.a
    }
    option = {      
        name = inv_building_events.51.b
    }
}

# Military training exercise in [building_province.GetName] devolves into madness
inv_building_events.52 = {
    type = country_event
    title = inv_building_events.52.t
    desc = inv_building_events.52.desc
    picture = greek_states_path_7_event
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            num_of_military_building > 1
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = long_cooldown
        }
        random_owned_province = {
            limit = {
                num_of_military_building > 1
            }
            save_scope_as = building_province
        }
    }

    option = {      
        name = inv_building_events.52.a
    }
    option = {      
        name = inv_building_events.52.b
    }
}

# Huge increase in conscription of men in [building_province.GetName]
inv_building_events.53 = {
    type = country_event
    title = inv_building_events.53.t
    desc = inv_building_events.53.desc
    picture = greek_seleucid_path_2_event
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            num_of_military_building > 1
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = long_cooldown
        }
        random_owned_province = {
            limit = {
                num_of_military_building > 1
            }
            save_scope_as = building_province
        }
    }

    option = {      
        name = inv_building_events.53.a
    }
    option = {      
        name = inv_building_events.53.b
    }
}

# Fires in the training camps of [building_province.GetName]
inv_building_events.54 = {
    type = country_event
    title = inv_building_events.54.t
    desc = inv_building_events.54.desc
    picture = aqueducts
    goto_location = scope:building_province

    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            num_of_military_building > 1
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = very_long_cooldown
        }
        random_owned_province = {
            limit = {
                num_of_military_building > 1
            }
            save_scope_as = building_province
        }
    }

    option = {      
        name = inv_building_events.54.a
    }
    option = {      
        name = inv_building_events.54.b
    }
}

# Citizens in the forums of [building_province.GetName] upset with [building_governor.GetName]
inv_building_events.55 = {
    type = country_event
    title = inv_building_events.55.t
    desc = inv_building_events.55.desc
    picture = city_province
    goto_location = scope:building_province
    left_portrait = scope:building_governor
    trigger = {
        NOT = { has_variable = population_building_cooldown }
        any_owned_province = {
            num_of_citizen > 5
            has_building = forum_building
            exists = governor
        }
    }

    immediate = {
        set_variable = {
            name = population_building_cooldown
            days = long_cooldown
        }
        random_owned_province = {
            limit = {
                num_of_citizen > 5
                has_building = forum_building
                exists = governor
            }
            save_scope_as = building_province
            governor = {
                save_scope_as = building_governor
            }
        }
    }

    option = {      
        name = inv_building_events.55.a
    }
    option = {      
        name = inv_building_events.55.b
    }
}
